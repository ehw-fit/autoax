

# This script is used to generate the lib_tuples.cpp file
import gzip
import json
import uuid
import argparse
from autoax import Config
import os


def main():
    p = argparse.ArgumentParser()
    p.add_argument('config', help='Config file (yaml)')
    p.add_argument('dataset', help='Dataset file form results (e.g. random)')

    args = p.parse_args()

    c = Config(args.config)


    lib_tuples = os.path.join(c.cwd, c.config["evaluate_lib"])
    c.block_on_result(filename=lib_tuples, relative=False)


    fn = c.result_path(args.dataset + ".json.gz")
    print(f"# Reading {fn}")
    data = json.load(gzip.open(fn))

    cfile = ["// generated by " + __file__ +
             " from " + args.config + " and " + args.dataset]

    for i in data:
        setting = {"name": i}

        funs = []
        for k, lib in c.components().items():
            funs.append(lib[data[i][k]]["cfun"])

        cfile.append("    ops[\"%(name)s\"] = make_tuple(%(funs)s);" % {
                     "name": i, "funs": ", ".join(funs)})

        #     "op1": data[i]["circ"]["opAdd1"]["cfun"],
        #     "op2": data[i]["circ"]["opAdd2"]["cfun"],
        #     "op3": data[i]["circ"]["opAdd3"]["cfun"],
        #     "op4": data[i]["circ"]["opAdd4"]["cfun"],
        #     "op5": data[i]["circ"]["opSub1"]["cfun"]
        # }

        # cfile.append(
        #     "    ops[\"%(name)s\"] = make_tuple(%(op1)s, %(op2)s, %(op3)s, %(op4)s, %(op5)s);" % setting)

    
    print("# Creating " , lib_tuples )
    open(lib_tuples, "w").write(
        "\n".join(cfile))


    run_list = c.result_path(args.dataset + ".runlist")
    print("# Creating " , run_list )

    
    open(run_list, "w").write(
        "\n".join(data.keys()))


if __name__ == "__main__":
    main()
