

# This script is used to generate the lib_tuples.cpp file
import gzip
import json
import uuid
import argparse
from autoax import Config
import os
from tqdm import tqdm


def main():
    p = argparse.ArgumentParser()
    p.add_argument('config', help='Config file (yaml)')
    p.add_argument('dataset', help='Dataset file form results (e.g. random)')
    p.add_argument('--mode', help='Mode - vivado, dc, etc', default='vivado')

    args = p.parse_args()

    c = Config(args.config)


    res_dir = os.path.join(c.cwd, "synth")
    os.path.exists(res_dir) or os.makedirs(res_dir)
    
    fn = c.result_path(args.dataset + ".json.gz")
    print(f"# Reading {fn}")
    data = json.load(gzip.open(fn))

    

    template = c.v_template()
    template = "\n".join(["// generated by " + __file__ +
             " from " + args.config + " and " + args.dataset, template])

    #print(template)

    tmp_path = c.temporary_path(f"{args.mode}/{args.dataset}/")
    lib_path = c.temporary_path(f"{args.mode}/{args.dataset}/lib/")

    run_data = []
    for i in tqdm(data, "Creating verilog"):
        setting = {"name": i, "libfiles" : []}

        vt = template
        vt = vt.replace("\"uid\"", i)

        setting["include"] = []
        if "evaluate_verilog_include" in c.config:
            # if not list, make it a list
            if not isinstance(c.config["evaluate_verilog_include"], list):
                c.config["evaluate_verilog_include"] = [c.config["evaluate_verilog_include"]]
                
            for k in c.config["evaluate_verilog_include"]:
                setting["include"].append(os.path.join(c.cwd, k))

        for k, lib in c.components().items():
            comp = lib[data[i][k]]
            l, f, ver = lib.extract_verilog(data[i][k])
            setting["libfiles"].append(os.path.join(l, f))

            if not os.path.exists(os.path.join(lib_path, l)):
                os.makedirs(os.path.join(lib_path, l))
            open(os.path.join(lib_path, l, f), "wb").write(ver)

            vt = vt.replace("\"" + k + "\"", comp["verilog_entity"])
        open(os.path.join(tmp_path, i + ".v"), "w").write(vt)
        run_data.append(setting)

    run_list = c.result_path(args.dataset + ".synth.tcl")
    print("# Creating " , run_list )

    def run_format(settings):
        lf = " ".join(map(lambda x: f"\"{lib_path}/{x}\"", settings['libfiles']))
        ifiles = " ".join(map(lambda x: f"\"{x}\"", settings['include']))
        

        return f"evaluate \"{args.dataset}\" \"{settings['name']}\" \"{tmp_path}\" {{ {ifiles} {lf} }}"
    
    open(run_list, "w").write(
        "\n".join(map(run_format, run_data)))


if __name__ == "__main__":
    main()
